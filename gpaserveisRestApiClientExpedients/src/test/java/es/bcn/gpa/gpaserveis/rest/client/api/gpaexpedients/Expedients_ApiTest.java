/*
 * API gpaexpedients
 * API gpaexpedients
 *
 * OpenAPI spec version: 1.17.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package es.bcn.gpa.gpaserveis.rest.client.api.gpaexpedients;

import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.ActualitzarDadesSollicitud;
import java.math.BigDecimal;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.CrearRegistre;
import org.joda.time.DateTime;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.ExpedientsRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.PageDataOfExpedientsRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RegistreAssentamentRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RegistreDocumentacioExpedient;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RespostaCrearRegistreExpedient;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RespostaObtenirXmlExpedient;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Expedients_Api
 */
@Ignore
public class Expedients_ApiTest {

    private final Expedients_Api api = new Expedients_Api();

    
    /**
     * Updates the provided expedient including specific data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actualitzarDadesSollicitudTest() {
        ActualitzarDadesSollicitud actualitzarDadesSollicitudRDTO = null;
        ExpedientsRDTO response = api.actualitzarDadesSollicitud(actualitzarDadesSollicitudRDTO);

        // TODO: test validations
    }
    
    /**
     * Returns all the expedients that meet the search criteria
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cercaExpedientsTest() {
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        String aplicacioNegoci = null;
        List<String> avisList = null;
        String codi = null;
        BigDecimal criteriDeCercaDadesOperacioList0Id = null;
        BigDecimal criteriDeCercaDadesOperacioList0Tipus = null;
        String criteriDeCercaDadesOperacioList0Valor = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        DateTime dataPresentacioDes = null;
        DateTime dataPresentacioFinsA = null;
        String dir = null;
        List<BigDecimal> estatList = null;
        BigDecimal id = null;
        BigDecimal idUsuari = null;
        Boolean isOge = null;
        Integer nextPageNumber = null;
        String numeroDocumentSollicitant = null;
        String numeroDocumentSollicitantEstricte = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        List<String> procedimentCodisList = null;
        BigDecimal procedimentId = null;
        BigDecimal procedimentVersio = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        String tramitador = null;
        List<BigDecimal> unitatsGestoresList = null;
        PageDataOfExpedientsRDTO response = api.cercaExpedients(absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, aplicacioNegoci, avisList, codi, criteriDeCercaDadesOperacioList0Id, criteriDeCercaDadesOperacioList0Tipus, criteriDeCercaDadesOperacioList0Valor, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dataPresentacioDes, dataPresentacioFinsA, dir, estatList, id, idUsuari, isOge, nextPageNumber, numeroDocumentSollicitant, numeroDocumentSollicitantEstricte, pageSize, previousPageNumber, procedimentCodisList, procedimentId, procedimentVersio, sort, totalElements, totalPages, tramitador, unitatsGestoresList);

        // TODO: test validations
    }
    
    /**
     * Returns the requested expedient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void consultarDadesExpedientTest() {
        BigDecimal id = null;
        ExpedientsRDTO response = api.consultarDadesExpedient(id);

        // TODO: test validations
    }
    
    /**
     * Returns the requested expedient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void consultarDadesExpedientPerCodiTest() {
        String codi = null;
        ExpedientsRDTO response = api.consultarDadesExpedientPerCodi(codi);

        // TODO: test validations
    }
    
    /**
     * Returns the requested unitat
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void consultarDadesRegistreAssentamentTest() {
        String codi = null;
        RegistreAssentamentRDTO response = api.consultarDadesRegistreAssentament(codi);

        // TODO: test validations
    }
    
    /**
     * Returns the requested id expedient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void consultarExpedientPerDocumentacioIdExtTest() {
        BigDecimal idDocumentacio = null;
        BigDecimal response = api.consultarExpedientPerDocumentacioIdExt(idDocumentacio);

        // TODO: test validations
    }
    
    /**
     * Register the provided expedient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void crearRegistreSolicitudExpedientTest() {
        BigDecimal accio = null;
        CrearRegistre registrarSolicitudExpedientRDTO = null;
        RespostaCrearRegistreExpedient response = api.crearRegistreSolicitudExpedient(accio, registrarSolicitudExpedientRDTO);

        // TODO: test validations
    }
    
    /**
     * Insert the provided expedient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void crearSollicitudExpedientTest() {
        ExpedientsRDTO expedientsRDTO = null;
        ExpedientsRDTO response = api.crearSollicitudExpedient(expedientsRDTO);

        // TODO: test validations
    }
    
    /**
     * Retorna el xml de la informaci√≥ de l&#39;expedient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obtenirXmlExpedientTest() {
        BigDecimal idExpedient = null;
        RespostaObtenirXmlExpedient response = api.obtenirXmlExpedient(idExpedient);

        // TODO: test validations
    }
    
    /**
     * Register the provided documentacio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registreDocumentacioAriadnaTest() {
        RegistreDocumentacioExpedient registreDocumentacioExpedientRDTO = null;
        api.registreDocumentacioAriadna(registreDocumentacioExpedientRDTO);

        // TODO: test validations
    }
    
}
