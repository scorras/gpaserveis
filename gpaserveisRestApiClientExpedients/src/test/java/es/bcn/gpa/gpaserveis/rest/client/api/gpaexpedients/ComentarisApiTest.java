/*
 * API gpaexpedients
 * API gpaexpedients
 *
 * OpenAPI spec version: 1.3.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package es.bcn.gpa.gpaserveis.rest.client.api.gpaexpedients;

import static java.math.BigDecimal.ONE;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.util.List;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.mockito.InjectMocks;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.util.MultiValueMap;

import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.ComentariCreacioAccio;

/**
 * API tests for ComentarisApi
 */
@SuppressWarnings("unchecked")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ComentarisApiTest extends ParentTest {

	@InjectMocks
	private ComentarisApi api = new ComentarisApi();

	/**
	 * Crea un nou comentari per a l&#39;expedient en funció de l&#39;acció
	 * executada
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void crearComentariAccioTest() {
		when(apiClient.invokeAPI(eq("/expedients/comentaris/1/accions/1/crear"), eq(HttpMethod.POST), any(MultiValueMap.class),
				any(Object.class), any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class),
				any(String[].class), any(ParameterizedTypeReference.class))).thenReturn(null);

		BigDecimal idAccio = ONE;
		BigDecimal idExpedient = ONE;
		ComentariCreacioAccio comentariCreacioAccioRDTO = new ComentariCreacioAccio();
		api.crearComentariAccio(idAccio, idExpedient, comentariCreacioAccioRDTO);

		assertTrue(true);
	}

	/**
	 * Deletes the requested comentari
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void deleteComentariTest() {
		when(apiClient.invokeAPI(eq("/expedient/{idExpedient}/comentari/{idComentari}/delete"), eq(HttpMethod.POST), any(MultiValueMap.class),
				any(Object.class), any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class),
				any(String[].class), any(ParameterizedTypeReference.class))).thenReturn(null);

		BigDecimal idComentari = ONE;
		BigDecimal idExpedient = ONE;
		api.deleteComentari(idComentari, idExpedient);

		assertTrue(true);
	}
}
