/*
 * API gpaexpedients
 * API gpaexpedients
 *
 * OpenAPI spec version: 1.3.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package es.bcn.gpa.gpaserveis.rest.client.api.gpaexpedients;

import static java.math.BigDecimal.ONE;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.util.List;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.mockito.InjectMocks;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.util.MultiValueMap;

import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.AnotarOperacioComptableRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.CanviUnitatGestoraRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.ConvidarTramitarRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.CrearRegistre;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.ExpedientCanviEstat;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.InscriureEnRegistreRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.ObtenirPerInteroperabilitat;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RedireccioAssentament;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RespostaCanviarEstatAccioExpedient;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RespostaCrearRegistreExpedient;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RespostaInteroperabilitat;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RetornTramitacio;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.RetornarTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaexpedients.TornarEnrereRDTO;

/**
 * API tests for ExpedientsApi
 */
@SuppressWarnings("unchecked")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ExpedientsApiTest extends ParentTest {

	@InjectMocks
	private ExpedientsApi api = new ExpedientsApi();

	@Test
	public void canviarEstatExpedientTest() {

		when(apiClient.invokeAPI(eq("/expedients/1/canviEstat"), eq(HttpMethod.POST), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(new RespostaCanviarEstatAccioExpedient());

		BigDecimal idExpedient = ONE;
		ExpedientCanviEstat expedientCanviEstatRDTO = new ExpedientCanviEstat();
		RespostaCanviarEstatAccioExpedient response = api.canviarEstatExpedient(idExpedient, expedientCanviEstatRDTO);

		assertTrue(response != null);
	}

	/**
	 * Anotar Operaci√≥ Comptable
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void anotarOperacioComptableTest() {

		when(apiClient.invokeAPI(eq("/expedients/anotarOperacioComptable/1"), eq(HttpMethod.POST), any(MultiValueMap.class),
				any(Object.class), any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class),
				any(String[].class), any(ParameterizedTypeReference.class))).thenReturn(null);

		BigDecimal idExpedient = ONE;
		AnotarOperacioComptableRDTO anotarOperacioComptableRDTO = new AnotarOperacioComptableRDTO();
		api.anotarOperacioComptable(idExpedient, anotarOperacioComptableRDTO);

		assertTrue(true);
	}

	/**
	 * Inscriure en un registre
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void inscriureEnRegistreTest() {
		when(apiClient.invokeAPI(eq("/expedients/inscriureEnRegistre/1"), eq(HttpMethod.POST), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(null);

		BigDecimal idExpedient = ONE;
		InscriureEnRegistreRDTO inscriureEnRegistreRDTO = new InscriureEnRegistreRDTO();
		api.inscriureEnRegistre(idExpedient, inscriureEnRegistreRDTO);

		assertTrue(true);
	}

	/**
	 * RetornarTramitacio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void retornarTramitacioExpedientTest() {
		when(apiClient.invokeAPI(eq("/expedients/retornarTramitacio/1"), eq(HttpMethod.POST), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(new RetornTramitacio());

		BigDecimal idExpedient = ONE;
		RetornarTramitacioRDTO retornarTramitacioRDTO = new RetornarTramitacioRDTO();
		RetornTramitacio retornTramitacio = api.retornarTramitacioExpedient(idExpedient, retornarTramitacioRDTO);

		assertTrue(retornTramitacio != null);
	}

	/**
	 * ConvidarTramitart
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void convidarTramitarExpedientTest() {
		when(apiClient.invokeAPI(eq("/expedients/convidarTramitar/1"), eq(HttpMethod.POST), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(null);

		ConvidarTramitarRDTO convidarTramitarRDTO = new ConvidarTramitarRDTO();
		BigDecimal idExpedient = ONE;
		api.convidarTramitarExpedient(convidarTramitarRDTO, idExpedient);

		assertTrue(true);
	}

	/**
	 * CanviarUnitatGestora
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void canviarUnitatGestoraExpedientTest() {
		when(apiClient.invokeAPI(eq("/expedients/canviUnitatGestora"), eq(HttpMethod.POST), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(null);

		CanviUnitatGestoraRDTO canviUnitatGestoraRDTO = new CanviUnitatGestoraRDTO();
		BigDecimal idExpedient = ONE;
		api.canviarUnitatGestoraExpedient(canviUnitatGestoraRDTO, idExpedient);

		assertTrue(true);
	}

	/**
	 * Esborrar registre solicitud expedient
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void esborrarRegistreSolicitudExpedientTest() {

		when(apiClient.invokeAPI(eq("/expedients/registre/esborrar"), eq(HttpMethod.POST), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(new RespostaCrearRegistreExpedient());

		CrearRegistre registrarSolicitudExpedientRDTO = new CrearRegistre();
		api.esborrarRegistreSolicitudExpedient(registrarSolicitudExpedientRDTO);

		assertTrue(true);
	}

	/**
	 * TornarEnrere expedient
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void tornarEnrereTest() {
		when(apiClient.invokeAPI(eq("/expedients/1/tornarEnrere"), eq(HttpMethod.POST), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(null);

		BigDecimal idExpedient = ONE;
		TornarEnrereRDTO tornarEnrereRDTO = new TornarEnrereRDTO();
		api.tornarEnrere(idExpedient, tornarEnrereRDTO);

		assertTrue(true);
	}

	/**
	 * obtenirPerInteroperabilitat
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void obtenirPerInteroperabilitatTest() {
		when(apiClient.invokeAPI(eq("/expedients/obtenirPerInteroperabilitat/1"), eq(HttpMethod.POST), any(MultiValueMap.class),
				any(Object.class), any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class),
				any(String[].class), any(ParameterizedTypeReference.class))).thenReturn(new RespostaInteroperabilitat());

		BigDecimal idExpedient = ONE;
		ObtenirPerInteroperabilitat obtenirPerInteroperabilitat = new ObtenirPerInteroperabilitat();
		RespostaInteroperabilitat response = api.obtenirPerInteroperabilitat(idExpedient, obtenirPerInteroperabilitat);

		assertTrue(response != null);
	}

	/**
	 * Redireccionar registre
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void redireccionarRegistreTest() {
		when(apiClient.invokeAPI(eq("/expedients/registre/redireccionar"), eq(HttpMethod.POST), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(null);

		RedireccioAssentament redireccioAssentamentRDTO = new RedireccioAssentament();
		api.redireccionarRegistre(redireccioAssentamentRDTO);

		assertTrue(true);
	}

}
