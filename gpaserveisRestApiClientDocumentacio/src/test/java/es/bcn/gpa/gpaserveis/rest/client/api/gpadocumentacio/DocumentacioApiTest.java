/*
 * API gpadocumentacio
 * API gpadocumentacio
 *
 * OpenAPI spec version: 1.4.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package es.bcn.gpa.gpaserveis.rest.client.api.gpadocumentacio;

import static java.math.BigDecimal.ONE;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Matchers.isNull;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

import org.apache.commons.lang.StringUtils;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.mockito.InjectMocks;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.AcumularDocumentacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.CallbackPortaSig;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsEntActualizarRegistre;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentActualizarRegistre;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentCanviEstat;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentRevisio;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.EstatRevisioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.GuardarRequerimentExpedient;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.RestClientResponse;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.SignarDocument;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.TransicionsEstatsRDTO;
import es.bcn.gpa.gpaserveis.rest.client.invoker.gpadocumentacio.ApiException;

/**
 * API tests for DocumentacioApi
 */
@SuppressWarnings("unchecked")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class DocumentacioApiTest extends ParentTest {

	@InjectMocks
	private DocumentacioApi api = new DocumentacioApi();

	/**
	 * Acumulació de la documentació
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void acumularDocumentacioUsingPOSTTest() throws ApiException {
		when(apiClient.invokeAPI(eq("/documentacio/acumularDocumentacio"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new RestClientResponse());

		AcumularDocumentacioRDTO acumularDocumentacioRDTO = new AcumularDocumentacioRDTO();
		RestClientResponse response = api.acumularDocumentacioUsingPOST(acumularDocumentacioRDTO);

		assertTrue(response != null);
	}

	/**
	 * Updates all selected DocsTramitacio with the EstatsDocument specified
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void canviEstatDocumentacioTramitacioUsingPOSTTest() throws ApiException {
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/canviEstat"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class))).thenReturn(null);

		DocumentCanviEstat documentCanviEstatRDTO = new DocumentCanviEstat();
		api.canviEstatDocumentacioTramitacioUsingPOST(documentCanviEstatRDTO);

		assertTrue(true);
	}

	/**
	 * Delete all selected DocsEntrada
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void esborrarDocumentExpedientTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/entrada/delete/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), isNull(GenericType.class))).thenReturn(null);

		List<BigDecimal> docsEntradaIds = Arrays.asList(ONE);
		BigDecimal idExpedient = ONE;
		api.esborrarDocumentExpedient(docsEntradaIds, idExpedient);

		assertTrue(true);
	}

	/**
	 * Delete all selected DocsEntrada
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void deleteDocumentacioTramitacioUsingPOSTTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/delete/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), isNull(GenericType.class))).thenReturn(null);

		List<BigDecimal> docsTramitacioIds = Arrays.asList(ONE);
		BigDecimal idExpedient = ONE;
		api.deleteDocumentacioTramitacioUsingPOST(docsTramitacioIds, idExpedient);

		assertTrue(true);
	}

	/**
	 * Returns the requested documentacio entrada
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getDocumentacioEntradaUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/1/entrada/1/1"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new PageDataOfDocsEntradaRDTO());

		String estatsFutursList = ONE.toString();
		BigDecimal idConfiguracioDocumentacio = ONE;
		BigDecimal idDocumentacio = ONE;
		Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
		Integer absoluteRowNumberOfLastRowInCurrentPage = null;
		Boolean currentPageHasNextPage = null;
		Boolean currentPageHasPreviousPage = null;
		Boolean currentPageIsFirstPage = null;
		Boolean currentPageIsLastPage = null;
		Integer currentPageNumber = null;
		String dir = null;
		Integer nextPageNumber = null;
		Integer pageSize = null;
		Integer previousPageNumber = null;
		String sort = null;
		Long totalElements = null;
		Integer totalPages = null;
		PageDataOfDocsEntradaRDTO response = api.getDocumentacioEntradaUsingGET(estatsFutursList, idConfiguracioDocumentacio,
				idDocumentacio, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage,
				currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize,
				previousPageNumber, sort, totalElements, totalPages);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested documentacio entrada grouped by tràmit OVT
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void cercaDocumentsEntradaAgrupatsPerTramitOvtTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/1/entrada/agrupatPerTramitOvt"), eq("GET"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new ArrayList<DocsEntradaRDTO>());

		BigDecimal idDocumentacio = ONE;
		List<DocsEntradaRDTO> response = api.cercaDocumentsEntradaAgrupatsPerTramitOvt(idDocumentacio);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested documentacio tramitacio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getDocumentacioTramitacioUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/1/tramitacio/1/1"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new PageDataOfDocsTramitacioRDTO());

		String estatsFutursList = ONE.toString();
		BigDecimal idConfiguracioDocumentacio = ONE;
		BigDecimal idDocumentacio = ONE;
		Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
		Integer absoluteRowNumberOfLastRowInCurrentPage = null;
		Boolean currentPageHasNextPage = null;
		Boolean currentPageHasPreviousPage = null;
		Boolean currentPageIsFirstPage = null;
		Boolean currentPageIsLastPage = null;
		Integer currentPageNumber = null;
		String dir = null;
		Integer nextPageNumber = null;
		Integer pageSize = null;
		Integer previousPageNumber = null;
		String sort = null;
		Long totalElements = null;
		Integer totalPages = null;
		PageDataOfDocsTramitacioRDTO response = api.getDocumentacioTramitacioUsingGET(estatsFutursList, idConfiguracioDocumentacio,
				idDocumentacio, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage,
				currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize,
				previousPageNumber, sort, totalElements, totalPages);

		assertTrue(response != null);
	}

	/**
	 * Returns all the EstatRevisio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getEstatsRevisioDocumentacioEntradaUsingGETTest() throws ApiException {
		when(apiClient.invokeAPI(eq("/documentacio/entrada/estatsRevisio"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new ArrayList<EstatRevisioRDTO>());

		List<EstatRevisioRDTO> response = api.getEstatsRevisioDocumentacioEntradaUsingGET();

		assertTrue(response != null);
	}

	/**
	 * Returns all the tipus grup entries for the idConfigDoc
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getTipusGrupEntradaUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/entrada/listTipusGrup/1"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new ArrayList<ConfiguracioDocsEntradaRDTO>());

		BigDecimal idConfigDoc = ONE;
		List<ConfiguracioDocsEntradaRDTO> response = api.getTipusGrupEntradaUsingGET(idConfigDoc);

		assertTrue(response != null);
	}

	/**
	 * Returns all the tipus grup entries for the idConfigDoc
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getTipusGrupTramitacioUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/listTipusGrup/1"), eq("GET"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new ArrayList<ConfiguracioDocsTramitacioRDTO>());

		BigDecimal idConfigDoc = ONE;
		List<ConfiguracioDocsTramitacioRDTO> response = api.getTipusGrupTramitacioUsingGET(idConfigDoc);

		assertTrue(response != null);
	}

	/**
	 * create new documentacio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void newDocumentacioUsingGETTest() throws ApiException {
		when(apiClient.invokeAPI(eq("/documentacio/newDocumentacio"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new RestClientResponse());

		RestClientResponse response = api.newDocumentacioUsingGET();

		assertTrue(response != null);
	}

	/**
	 * Returns the requested documentacio entrada
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void obteneriDocumentacioEntradaEnRevisioUsingGETTest() throws ApiException {
		when(apiClient.invokeAPI(eq("/documentacio/documentacioEntradaEnRevisio"), eq("GET"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new ArrayList<BigDecimal>());

		List<BigDecimal> response = api.obteneriDocumentacioEntradaEnRevisioUsingGET();

		assertTrue(response != null);
	}

	/**
	 * Get all estats documentació tramitació
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void obtenirTransicionsEstatsByEstatDocTramUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/estatsDocTramCanviEstat/1"), eq("GET"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new ArrayList<TransicionsEstatsRDTO>());

		BigDecimal estatDocTramitacio = ONE;
		List<TransicionsEstatsRDTO> response = api.obtenirTransicionsEstatsByEstatDocTramUsingGET(estatDocTramitacio);

		assertTrue(response != null);
	}

	/**
	 * Updates all selected DocsEntrada with the EstatRevisio specified
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void revisarDocumentacioEntradaUsingPOSTTest() throws ApiException {
		when(apiClient.invokeAPI(eq("/documentacio/entrada/revisar"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class))).thenReturn(null);

		DocumentRevisio documentRevisioRDTO = new DocumentRevisio();
		api.revisarDocumentacioEntrada(documentRevisioRDTO);

		assertTrue(true);
	}
	//
	// /**
	// * updates the doc entrada
	// *
	// *
	// *
	// * @throws ApiException
	// * if the Api call fails
	// */
	// @Test
	// public void guardarDocumentEntradaTest() throws ApiException {
	// when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
	// when(apiClient.invokeAPI(eq("/documentacio/entrada/saveDocEntrada/1"),
	// eq("POST"), any(List.class), any(Object.class),
	// any(Map.class), any(Map.class), isNull(String.class),
	// isNull(String.class), any(String[].class), any(GenericType.class)))
	// .thenReturn(new DocsEntradaRDTO());
	//
	// DocsEntradaRDTO docsEntradaRDTO = new DocsEntradaRDTO();
	// BigDecimal idExpedient = ONE;
	// DocsEntradaRDTO response = api.guardarDocumentEntrada(docsEntradaRDTO,
	// idExpedient);
	//
	// assertTrue(response != null);
	// }
	//
	// /**
	// * updates the doc tramitacio
	// *
	// *
	// *
	// * @throws ApiException
	// * if the Api call fails
	// */
	// @Test
	// public void guardarDocumentTramitacioTest() throws ApiException {
	// when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
	// when(apiClient.invokeAPI(eq("/documentacio/tramitacio/saveDocTramitacio/1"),
	// eq("POST"), any(List.class), any(Object.class),
	// any(Map.class), any(Map.class), isNull(String.class),
	// isNull(String.class), any(String[].class), any(GenericType.class)))
	// .thenReturn(new DocsTramitacioRDTO());
	//
	// DocsTramitacioRDTO docsTramitacioRDTO = new DocsTramitacioRDTO();
	// BigDecimal idExpedient = ONE;
	// DocsTramitacioRDTO response =
	// api.guardarDocumentTramitacio(docsTramitacioRDTO, idExpedient);
	//
	// assertTrue(response != null);
	// }
	//
	// /**
	// * updates the requeriment
	// *
	// *
	// *
	// * @throws ApiException
	// * if the Api call fails
	// */
	// @Test
	// public void guardarRequerimentTest() throws ApiException {
	// when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
	// when(apiClient.invokeAPI(eq("/documentacio/saveRequeriment/1"),
	// eq("POST"), any(List.class), any(Object.class), any(Map.class),
	// any(Map.class), isNull(String.class), isNull(String.class),
	// any(String[].class), any(GenericType.class)))
	// .thenReturn(new DocsTramitacioRDTO());
	//
	// GuardarRequerimentExpedient guardarRequerimentExpedientRDTO = new
	// GuardarRequerimentExpedient();
	// BigDecimal idExpedient = ONE;
	// DocsTramitacioRDTO response =
	// api.guardarRequeriment(guardarRequerimentExpedientRDTO, idExpedient);
	//
	// assertTrue(response != null);
	// }

	/**
	 * Returns the requested document
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void consultarDadesDocumentAportatTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/entrada/1"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsEntradaRDTO());

		BigDecimal id = ONE;
		DocsEntradaRDTO response = api.consultarDadesDocumentAportat(id);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested dades operacio requerit
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void cercaDadesOperacioRequeritsTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/dadesOperRequerit/1"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new ArrayList<BigDecimal>());

		BigDecimal idDoc = ONE;
		List<BigDecimal> response = api.cercaDadesOperacioRequerits(idDoc);

		assertTrue(response != null);
	}

	/**
	 * associa el registre a la llista de documentació
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void associarRegistreDocsEntTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/associarRegistreDocsEnt"), eq("POST"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(null);

		DocsEntActualizarRegistre docsEntActualizarRegistreRDTO = new DocsEntActualizarRegistre();
		api.associarRegistreDocsEnt(docsEntActualizarRegistreRDTO);

		assertTrue(true);
	}

	/**
	 * associa el registre a la documentació de l&#39;expedient
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void associarRegistreDocumentacioTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/associarRegistreDocsEnt"), eq("POST"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(null);

		DocumentActualizarRegistre documentActualizarRegistreRDTO = new DocumentActualizarRegistre();
		api.associarRegistreDocumentacio(documentActualizarRegistreRDTO);

		assertTrue(true);
	}

	/**
	 * Crear peticio porta sig test.
	 *
	 * @throws ApiException
	 *             the api exception
	 */
	@Test
	public void crearPeticioPortaSigTest() throws ApiException {
		when(apiClient.invokeAPI(eq("/documentacio/crearPeticioPortaSig"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class))).thenReturn(null);

		SignarDocument signarDocumentRDTO = new SignarDocument();
		api.crearPeticioPortaSig(signarDocumentRDTO);

		assertTrue(true);
	}

	/**
	 * Cancelar signar document using POST test.
	 *
	 * @throws ApiException
	 *             the api exception
	 */
	@Test
	public void cancelarSignarDocumentUsingPOSTTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/cancelarPeticioPortaSig/1"), eq("POST"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(null);

		api.cancelarSignarDocumentUsingPOST(ONE);

		assertTrue(true);
	}

	/**
	 * Returns the requested document
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void consultarDadesDocumentGeneratTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/1"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		BigDecimal id = ONE;
		DocsTramitacioRDTO response = api.consultarDadesDocumentGenerat(id);

		assertTrue(response != null);
	}

	/**
	 * ComprovarDocumentsSignats
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void comprovarDocumentsSignatsUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/comprovarDocumentsSignats/1"), eq("GET"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(Boolean.TRUE);

		BigDecimal idDocumentacio = ONE;
		Boolean response = api.comprovarDocumentsSignatsUsingGET(idDocumentacio);

		assertTrue(response != null);
	}

	/**
	 * updates the doc entrada responsable
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void crearDeclaracioResponsableTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/entrada/responsable/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsEntradaRDTO());

		DocsEntradaRDTO docsEntradaRDTO = new DocsEntradaRDTO();
		BigDecimal idExpedient = ONE;
		DocsEntradaRDTO response = api.crearDeclaracioResponsable(docsEntradaRDTO, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * crea el document d&#39;entrada
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void crearDocumentEntradaTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/entrada/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsEntradaRDTO());

		DocsEntradaRDTO docsEntradaRDTO = new DocsEntradaRDTO();
		BigDecimal idExpedient = ONE;
		DocsEntradaRDTO response = api.crearDocumentEntrada(docsEntradaRDTO, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * crea o actualitza el requeriment i desa el document
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 * @throws IOException
	 */
	@Test
	public void guardarRequerimentFitxerTest() throws ApiException, IOException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/requeriment/fitxer/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		MultipartFile file = new MockMultipartFile("file", "prova.txt", "text/plain", "prova".getBytes());
		BigDecimal idExpedient = ONE;
		String requerimentExpedient = StringUtils.EMPTY;
		DocsTramitacioRDTO response = api.guardarRequerimentFitxer(file, idExpedient, requerimentExpedient);

		assertTrue(response != null);
	}

	/**
	 * crea o actualitza el requeriment i desa la plantilla
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void guardarRequerimentPlantillaTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/requeriment/plantilla/1"), eq("POST"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		GuardarRequerimentExpedient guardarRequerimentExpedientRDTO = new GuardarRequerimentExpedient();
		BigDecimal idExpedient = ONE;
		DocsTramitacioRDTO response = api.guardarRequerimentPlantilla(guardarRequerimentExpedientRDTO, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested documentacio tramitacio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void obtenirDocsTramitacioByNotificationIdTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/docsTramitacioByNotificationId/1"), eq("GET"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		BigDecimal idNotificacio = ONE;
		DocsTramitacioRDTO response = api.obtenirDocsTramitacioByNotificationId(idNotificacio);

		assertTrue(response != null);
	}

	/**
	 * updates the doc entrada
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 * @throws IOException
	 */
	@Test
	public void guardarDocumentEntradaFitxerTest() throws ApiException, IOException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/entrada/fitxer/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsEntradaRDTO());

		String docsEntrada = StringUtils.EMPTY;
		MultipartFile file = new MockMultipartFile("file", "prova.txt", "text/plain", "prova".getBytes());
		BigDecimal idExpedient = ONE;
		DocsEntradaRDTO response = api.guardarDocumentEntradaFitxer(docsEntrada, file, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * save the doc tramitacio i fitxer
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 * @throws IOException
	 */
	@Test
	public void guardarDocumentTramitacioFitxerTest() throws ApiException, IOException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/fitxer/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		String docsTramitacio = StringUtils.EMPTY;
		MultipartFile file = new MockMultipartFile("file", "prova.txt", "text/plain", "prova".getBytes());
		BigDecimal idExpedient = ONE;
		DocsTramitacioRDTO response = api.guardarDocumentTramitacioFitxer(docsTramitacio, file, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * save the doc tramitacio i plantilla
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void guardarDocumentTramitacioPlantillaTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/plantilla/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		DocsTramitacioRDTO docsTramitacioRDTO = new DocsTramitacioRDTO();
		BigDecimal idExpedient = ONE;
		DocsTramitacioRDTO response = api.guardarDocumentTramitacioPlantilla(docsTramitacioRDTO, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * updates the doc entrada responsable
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void actualitzarDeclaracioResponsableTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/entrada/responsable/1"), eq("PUT"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsEntradaRDTO());

		DocsEntradaRDTO docsEntradaRDTO = new DocsEntradaRDTO();
		BigDecimal idExpedient = ONE;
		DocsEntradaRDTO response = api.actualitzarDeclaracioResponsable(docsEntradaRDTO, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * actualitzar el document d&#39;entrada
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void actualitzarDocumentEntradaTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/entrada/1"), eq("PUT"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsEntradaRDTO());

		DocsEntradaRDTO docsEntradaRDTO = new DocsEntradaRDTO();
		BigDecimal idExpedient = ONE;
		DocsEntradaRDTO response = api.actualitzarDocumentEntrada(docsEntradaRDTO, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * actualitzar document tramitacio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void actualitzarDocumentTramitacioTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/1"), eq("PUT"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		DocsTramitacioRDTO docsTramitacioRDTO = new DocsTramitacioRDTO();
		BigDecimal idExpedient = ONE;
		DocsTramitacioRDTO response = api.actualitzarDocumentTramitacio(docsTramitacioRDTO, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * updates the requeriment
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void actualitzarRequerimentTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/requeriment/1"), eq("PUT"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		GuardarRequerimentExpedient guardarRequerimentExpedientRDTO = new GuardarRequerimentExpedient();
		BigDecimal idExpedient = ONE;
		DocsTramitacioRDTO response = api.actualitzarRequeriment(guardarRequerimentExpedientRDTO, idExpedient);

		assertTrue(response != null);
	}

	/**
	 * Callback per actualitzar l&#39;estat dels documents enviats a portasig
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void callbackPortaSigTest() throws ApiException {
		when(apiClient.invokeAPI(eq("/documentacio/callbackPortaSig"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class))).thenReturn(null);
		CallbackPortaSig callbackPortaSigRDTO = new CallbackPortaSig();
		api.callbackPortaSig(callbackPortaSigRDTO);
		assertTrue(true);
	}

	/**
	 * Closes the expedient&#39;s requirements
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void tancarRequerimentsExpedientTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tancarRequeriments/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class))).thenReturn(null);

		BigDecimal idDocumentacio = ONE;
		api.tancarRequerimentsExpedient(idDocumentacio);
		assertTrue(true);
	}

	/**
	 * crea el document de tramitació
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void crearDocumentTramitacioTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/documentacio/tramitacio/1"), eq("POST"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new DocsTramitacioRDTO());

		DocsTramitacioRDTO docsTramitacioRDTO = new DocsTramitacioRDTO();
		BigDecimal idExpedient = ONE;
		DocsTramitacioRDTO response = api.crearDocumentTramitacio(docsTramitacioRDTO, idExpedient);

		assertTrue(response != null);
	}
}
