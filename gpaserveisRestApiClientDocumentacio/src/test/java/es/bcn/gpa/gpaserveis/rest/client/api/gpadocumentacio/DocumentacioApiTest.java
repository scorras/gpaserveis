/*
 * API gpadocumentacio
 * API gpadocumentacio
 *
 * OpenAPI spec version: 1.11.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package es.bcn.gpa.gpaserveis.rest.client.api.gpadocumentacio;

import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.AcumularDocumentacioRDTO;
import java.math.BigDecimal;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.CallbackPortaSig;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsEntActualizarRegistre;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentActualizarRegistre;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentCanviEstat;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentRevisio;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.EstatRevisioRDTO;
import java.io.File;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.GuardarRequerimentExpedient;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PeticionsPortasig;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.RestClientResponse;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.SignarDocument;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.TransicionsEstatsRDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentacioApi
 */
@Ignore
public class DocumentacioApiTest {

    private final DocumentacioApi api = new DocumentacioApi();

    
    /**
     * updates the doc entrada responsable
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actualitzarDeclaracioResponsableTest() {
        DocsEntradaRDTO docsEntradaRDTO = null;
        BigDecimal idExpedient = null;
        DocsEntradaRDTO response = api.actualitzarDeclaracioResponsable(docsEntradaRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * actualitzar el document d&#39;entrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actualitzarDocumentEntradaTest() {
        DocsEntradaRDTO docsEntradaRDTO = null;
        BigDecimal idExpedient = null;
        DocsEntradaRDTO response = api.actualitzarDocumentEntrada(docsEntradaRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * actualitzar document tramitacio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actualitzarDocumentTramitacioTest() {
        DocsTramitacioRDTO docsTramitacioRDTO = null;
        BigDecimal idExpedient = null;
        DocsTramitacioRDTO response = api.actualitzarDocumentTramitacio(docsTramitacioRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * updates the requeriment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actualitzarRequerimentTest() {
        GuardarRequerimentExpedient guardarRequerimentExpedientRDTO = null;
        BigDecimal idExpedient = null;
        DocsTramitacioRDTO response = api.actualitzarRequeriment(guardarRequerimentExpedientRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * Acumulació de la documentació
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acumularDocumentacioUsingPOSTTest() {
        AcumularDocumentacioRDTO acumularDocumentacioRDTO = null;
        RestClientResponse response = api.acumularDocumentacioUsingPOST(acumularDocumentacioRDTO);

        // TODO: test validations
    }
    
    /**
     * associa el registre a la llista de documentació
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void associarRegistreDocsEntTest() {
        DocsEntActualizarRegistre docsEntActualizarRegistreRDTO = null;
        api.associarRegistreDocsEnt(docsEntActualizarRegistreRDTO);

        // TODO: test validations
    }
    
    /**
     * associa el registre a la documentació de l&#39;expedient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void associarRegistreDocumentacioTest() {
        DocumentActualizarRegistre documentActualizarRegistreRDTO = null;
        api.associarRegistreDocumentacio(documentActualizarRegistreRDTO);

        // TODO: test validations
    }
    
    /**
     * Callback per actualitzar l&#39;estat dels documents enviats a portasig
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callbackPortaSigTest() {
        CallbackPortaSig callbackPortaSigRDTO = null;
        api.callbackPortaSig(callbackPortaSigRDTO);

        // TODO: test validations
    }
    
    /**
     * Cancel·lar una petició per signar o validar un document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelarSignarDocumentUsingPOSTTest() {
        BigDecimal idDocument = null;
        api.cancelarSignarDocumentUsingPOST(idDocument);

        // TODO: test validations
    }
    
    /**
     * Updates all selected DocsTramitacio with the EstatsDocument specified
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void canviEstatDocumentacioTramitacioUsingPOSTTest() {
        DocumentCanviEstat documentCanviEstatRDTO = null;
        api.canviEstatDocumentacioTramitacioUsingPOST(documentCanviEstatRDTO);

        // TODO: test validations
    }
    
    /**
     * Returns the requested dades operacio requerit
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cercaDadesOperacioRequeritsTest() {
        BigDecimal idDoc = null;
        List<BigDecimal> response = api.cercaDadesOperacioRequerits(idDoc);

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio entrada grouped by tràmit OVT
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cercaDocumentsEntradaAgrupatsPerTramitOvtTest() {
        BigDecimal idDocumentacio = null;
        List<DocsEntradaRDTO> response = api.cercaDocumentsEntradaAgrupatsPerTramitOvt(idDocumentacio);

        // TODO: test validations
    }
    
    /**
     * ComprovarDocumentsSignats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comprovarDocumentsSignatsUsingGETTest() {
        BigDecimal idDocumentacio = null;
        Boolean response = api.comprovarDocumentsSignatsUsingGET(idDocumentacio);

        // TODO: test validations
    }
    
    /**
     * Returns the requested document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void consultarDadesDocumentAportatTest() {
        BigDecimal id = null;
        DocsEntradaRDTO response = api.consultarDadesDocumentAportat(id);

        // TODO: test validations
    }
    
    /**
     * Returns the requested document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void consultarDadesDocumentGeneratTest() {
        BigDecimal id = null;
        DocsTramitacioRDTO response = api.consultarDadesDocumentGenerat(id);

        // TODO: test validations
    }
    
    /**
     * updates the doc entrada responsable
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void crearDeclaracioResponsableTest() {
        DocsEntradaRDTO docsEntradaRDTO = null;
        BigDecimal idExpedient = null;
        DocsEntradaRDTO response = api.crearDeclaracioResponsable(docsEntradaRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * crea el document d&#39;entrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void crearDocumentEntradaTest() {
        DocsEntradaRDTO docsEntradaRDTO = null;
        BigDecimal idExpedient = null;
        DocsEntradaRDTO response = api.crearDocumentEntrada(docsEntradaRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * crea el document de tramitació
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void crearDocumentTramitacioTest() {
        DocsTramitacioRDTO docsTramitacioRDTO = null;
        BigDecimal idExpedient = null;
        DocsTramitacioRDTO response = api.crearDocumentTramitacio(docsTramitacioRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * Crear una petició per signar o validar un document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void crearPeticioPortaSigTest() {
        SignarDocument signarDocumentRDTO = null;
        PeticionsPortasig response = api.crearPeticioPortaSig(signarDocumentRDTO);

        // TODO: test validations
    }
    
    /**
     * Delete all selected DocsEntrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentacioTramitacioUsingPOSTTest() {
        List<BigDecimal> docsTramitacioIds = null;
        BigDecimal idExpedient = null;
        api.deleteDocumentacioTramitacioUsingPOST(docsTramitacioIds, idExpedient);

        // TODO: test validations
    }
    
    /**
     * Delete all selected DocsEntrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void esborrarDocumentExpedientTest() {
        List<BigDecimal> docsEntradaIds = null;
        BigDecimal idExpedient = null;
        api.esborrarDocumentExpedient(docsEntradaIds, idExpedient);

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio entrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentacioEntradaUsingGETTest() {
        String estatsFutursList = null;
        BigDecimal idConfiguracioDocumentacio = null;
        BigDecimal idDocumentacio = null;
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        String dir = null;
        Integer nextPageNumber = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        PageDataOfDocsEntradaRDTO response = api.getDocumentacioEntradaUsingGET(estatsFutursList, idConfiguracioDocumentacio, idDocumentacio, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements, totalPages);

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio tramitacio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentacioTramitacioUsingGETTest() {
        String estatsFutursList = null;
        BigDecimal idConfiguracioDocumentacio = null;
        BigDecimal idDocumentacio = null;
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        String dir = null;
        Integer nextPageNumber = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        PageDataOfDocsTramitacioRDTO response = api.getDocumentacioTramitacioUsingGET(estatsFutursList, idConfiguracioDocumentacio, idDocumentacio, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements, totalPages);

        // TODO: test validations
    }
    
    /**
     * Returns all the EstatRevisio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEstatsRevisioDocumentacioEntradaUsingGETTest() {
        List<EstatRevisioRDTO> response = api.getEstatsRevisioDocumentacioEntradaUsingGET();

        // TODO: test validations
    }
    
    /**
     * Returns all the tipus grup entries for the idConfigDoc
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTipusGrupEntradaUsingGETTest() {
        BigDecimal idConfigDoc = null;
        List<ConfiguracioDocsEntradaRDTO> response = api.getTipusGrupEntradaUsingGET(idConfigDoc);

        // TODO: test validations
    }
    
    /**
     * Returns all the tipus grup entries for the idConfigDoc
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTipusGrupTramitacioUsingGETTest() {
        BigDecimal idConfigDoc = null;
        List<ConfiguracioDocsTramitacioRDTO> response = api.getTipusGrupTramitacioUsingGET(idConfigDoc);

        // TODO: test validations
    }
    
    /**
     * updates the doc entrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guardarDocumentEntradaFitxerTest() {
        String docsEntrada = null;
        File file = null;
        BigDecimal idExpedient = null;
        DocsEntradaRDTO response = api.guardarDocumentEntradaFitxer(docsEntrada, file, idExpedient);

        // TODO: test validations
    }
    
    /**
     * save the doc tramitacio i fitxer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guardarDocumentTramitacioFitxerTest() {
        String docsTramitacio = null;
        File file = null;
        BigDecimal idExpedient = null;
        DocsTramitacioRDTO response = api.guardarDocumentTramitacioFitxer(docsTramitacio, file, idExpedient);

        // TODO: test validations
    }
    
    /**
     * save the doc tramitacio i plantilla
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guardarDocumentTramitacioPlantillaTest() {
        DocsTramitacioRDTO docsTramitacioRDTO = null;
        BigDecimal idExpedient = null;
        DocsTramitacioRDTO response = api.guardarDocumentTramitacioPlantilla(docsTramitacioRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * crea o actualitza el requeriment i desa el document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guardarRequerimentFitxerTest() {
        File file = null;
        BigDecimal idExpedient = null;
        String requerimentExpedient = null;
        DocsTramitacioRDTO response = api.guardarRequerimentFitxer(file, idExpedient, requerimentExpedient);

        // TODO: test validations
    }
    
    /**
     * crea o actualitza el requeriment i desa la plantilla
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guardarRequerimentPlantillaTest() {
        GuardarRequerimentExpedient guardarRequerimentExpedientRDTO = null;
        BigDecimal idExpedient = null;
        DocsTramitacioRDTO response = api.guardarRequerimentPlantilla(guardarRequerimentExpedientRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * create new documentacio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void newDocumentacioUsingGETTest() {
        RestClientResponse response = api.newDocumentacioUsingGET();

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio entrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obteneriDocumentacioEntradaEnRevisioUsingGETTest() {
        List<BigDecimal> response = api.obteneriDocumentacioEntradaEnRevisioUsingGET();

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio tramitacio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obtenirDocsTramitacioByNotificationIdTest() {
        BigDecimal idNotificacio = null;
        DocsTramitacioRDTO response = api.obtenirDocsTramitacioByNotificationId(idNotificacio);

        // TODO: test validations
    }
    
    /**
     * Get all estats documentació tramitació
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obtenirTransicionsEstatsByEstatDocTramUsingGETTest() {
        BigDecimal estatDocTramitacio = null;
        List<TransicionsEstatsRDTO> response = api.obtenirTransicionsEstatsByEstatDocTramUsingGET(estatDocTramitacio);

        // TODO: test validations
    }
    
    /**
     * Updates all selected DocsEntrada with the EstatRevisio specified
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revisarDocumentacioEntradaTest() {
        DocumentRevisio documentRevisioRDTO = null;
        api.revisarDocumentacioEntrada(documentRevisioRDTO);

        // TODO: test validations
    }
    
    /**
     * Closes the expedient&#39;s requirements
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tancarRequerimentsExpedientTest() {
        BigDecimal idDocumentacio = null;
        api.tancarRequerimentsExpedient(idDocumentacio);

        // TODO: test validations
    }
    
}
