/*
 * API gpadocumentacio
 * API gpadocumentacio
 *
 * OpenAPI spec version: 1.11.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package es.bcn.gpa.gpaserveis.rest.client.api.gpadocumentacio;

import es.bcn.gpa.gpaserveis.rest.client.invoker.gpadocumentacio.ApiException;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.AcumularDocumentacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.AportarDocumentacioExpedient;
import java.math.BigDecimal;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsEntActualizarRegistre;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentActualizarRegistre;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentCanviEstat;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DocumentRevisio;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.EstatRevisioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.RespostaAportarDocumentacioExpedientRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.RespostaSubstituirDocumentExpedientRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.RespostaUploadDocumentExpedient;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.RestClientResponse;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.SubstituirDocumentExpedient;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.TransicionsEstatsRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.UploadDocumentExpedient;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentacioApi
 */
@Ignore
public class DocumentacioApiTest {

    private final DocumentacioApi api = new DocumentacioApi();

    
    /**
     * Acumulació de la documentació
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acumularDocumentacioUsingPOSTTest() throws ApiException {
        AcumularDocumentacioRDTO acumularDocumentacioRDTO = null;
        RestClientResponse response = api.acumularDocumentacioUsingPOST(acumularDocumentacioRDTO);

        // TODO: test validations
    }
    
    /**
     * Stores the documentation provided
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aportarDocumentacioExpedientTest() throws ApiException {
        AportarDocumentacioExpedient aportarDocumentacioExpedientRDTO = null;
        BigDecimal idExpedient = null;
        RespostaAportarDocumentacioExpedientRDTO response = api.aportarDocumentacioExpedient(aportarDocumentacioExpedientRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * associa el registre a la llista de documentació
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void associarRegistreDocsEntTest() throws ApiException {
        DocsEntActualizarRegistre docsEntActualizarRegistreRDTO = null;
        api.associarRegistreDocsEnt(docsEntActualizarRegistreRDTO);

        // TODO: test validations
    }
    
    /**
     * associa el registre a la documentació de l&#39;expedient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void associarRegistreDocumentacioTest() throws ApiException {
        DocumentActualizarRegistre documentActualizarRegistreRDTO = null;
        api.associarRegistreDocumentacio(documentActualizarRegistreRDTO);

        // TODO: test validations
    }
    
    /**
     * Updates all selected DocsTramitacio with the EstatsDocument specified
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void canviEstatDocumentacioTramitacioUsingPOSTTest() throws ApiException {
        DocumentCanviEstat documentCanviEstatRDTO = null;
        api.canviEstatDocumentacioTramitacioUsingPOST(documentCanviEstatRDTO);

        // TODO: test validations
    }
    
    /**
     * Returns the requested dades operacio requerit
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cercaDadesOperacioRequeritsTest() throws ApiException {
        BigDecimal idDoc = null;
        List<BigDecimal> response = api.cercaDadesOperacioRequerits(idDoc);

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio entrada grouped by tràmit OVT
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cercaDocumentsEntradaAgrupatsPerTramitOvtTest() throws ApiException {
        BigDecimal idDocumentacio = null;
        List<DocsEntradaRDTO> response = api.cercaDocumentsEntradaAgrupatsPerTramitOvt(idDocumentacio);

        // TODO: test validations
    }
    
    /**
     * Returns the requested document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void consultarDadesDocumentAportatTest() throws ApiException {
        BigDecimal id = null;
        DocsEntradaRDTO response = api.consultarDadesDocumentAportat(id);

        // TODO: test validations
    }
    
    /**
     * Delete all selected DocsEntrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentacioTramitacioUsingPOSTTest() throws ApiException {
        List<BigDecimal> docsTramitacioIds = null;
        BigDecimal idExpedient = null;
        api.deleteDocumentacioTramitacioUsingPOST(docsTramitacioIds, idExpedient);

        // TODO: test validations
    }
    
    /**
     * Delete all selected DocsEntrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void esborrarDocumentExpedientTest() throws ApiException {
        List<BigDecimal> docsEntradaIds = null;
        BigDecimal idExpedient = null;
        api.esborrarDocumentExpedient(docsEntradaIds, idExpedient);

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio entrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentacioEntradaUsingGETTest() throws ApiException {
        String estatsFutursList = null;
        BigDecimal idConfiguracioDocumentacio = null;
        BigDecimal idDocumentacio = null;
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        String dir = null;
        Integer nextPageNumber = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        PageDataOfDocsEntradaRDTO response = api.getDocumentacioEntradaUsingGET(estatsFutursList, idConfiguracioDocumentacio, idDocumentacio, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements, totalPages);

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio tramitacio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentacioTramitacioUsingGETTest() throws ApiException {
        String estatsFutursList = null;
        BigDecimal idConfiguracioDocumentacio = null;
        BigDecimal idDocumentacio = null;
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        String dir = null;
        Integer nextPageNumber = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        PageDataOfDocsTramitacioRDTO response = api.getDocumentacioTramitacioUsingGET(estatsFutursList, idConfiguracioDocumentacio, idDocumentacio, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements, totalPages);

        // TODO: test validations
    }
    
    /**
     * Returns all the EstatRevisio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEstatsRevisioDocumentacioEntradaUsingGETTest() throws ApiException {
        List<EstatRevisioRDTO> response = api.getEstatsRevisioDocumentacioEntradaUsingGET();

        // TODO: test validations
    }
    
    /**
     * Returns all the tipus grup entries for the idConfigDoc
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTipusGrupEntradaUsingGETTest() throws ApiException {
        BigDecimal idConfigDoc = null;
        List<ConfiguracioDocsEntradaRDTO> response = api.getTipusGrupEntradaUsingGET(idConfigDoc);

        // TODO: test validations
    }
    
    /**
     * Returns all the tipus grup entries for the idConfigDoc
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTipusGrupTramitacioUsingGETTest() throws ApiException {
        BigDecimal idConfigDoc = null;
        List<ConfiguracioDocsTramitacioRDTO> response = api.getTipusGrupTramitacioUsingGET(idConfigDoc);

        // TODO: test validations
    }
    
    /**
     * updates the doc entrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guardarDocumentEntradaTest() throws ApiException {
        DocsEntradaRDTO docsEntradaRDTO = null;
        BigDecimal idExpedient = null;
        DocsEntradaRDTO response = api.guardarDocumentEntrada(docsEntradaRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * updates the doc tramitacio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guardarDocumentTramitacioTest() throws ApiException {
        DocsTramitacioRDTO docsTramitacioRDTO = null;
        BigDecimal idExpedient = null;
        DocsTramitacioRDTO response = api.guardarDocumentTramitacio(docsTramitacioRDTO, idExpedient);

        // TODO: test validations
    }
    
    /**
     * create new documentacio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void newDocumentacioUsingGETTest() throws ApiException {
        RestClientResponse response = api.newDocumentacioUsingGET();

        // TODO: test validations
    }
    
    /**
     * Returns the requested documentacio entrada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obteneriDocumentacioEntradaEnRevisioUsingGETTest() throws ApiException {
        List<BigDecimal> response = api.obteneriDocumentacioEntradaEnRevisioUsingGET();

        // TODO: test validations
    }
    
    /**
     * Get all estats documentació tramitació
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obtenirTransicionsEstatsByEstatDocTramUsingGETTest() throws ApiException {
        BigDecimal estatDocTramitacio = null;
        List<TransicionsEstatsRDTO> response = api.obtenirTransicionsEstatsByEstatDocTramUsingGET(estatDocTramitacio);

        // TODO: test validations
    }
    
    /**
     * Updates all selected DocsEntrada with the EstatRevisio specified
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revisarDocumentacioEntradaTest() throws ApiException {
        DocumentRevisio documentRevisioRDTO = null;
        api.revisarDocumentacioEntrada(documentRevisioRDTO);

        // TODO: test validations
    }
    
    /**
     * updates the requeriment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveRequerimentUsingPOSTTest() throws ApiException {
        DocsTramitacioRDTO docsTramitacioRDTO = null;
        BigDecimal idExpedient = null;
        String idsConfDocEntradaList = null;
        String idsDadesOperList = null;
        DocsTramitacioRDTO response = api.saveRequerimentUsingPOST(docsTramitacioRDTO, idExpedient, idsConfDocEntradaList, idsDadesOperList);

        // TODO: test validations
    }
    
    /**
     * Updates the document provided
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void substituirDocumentExpedientTest() throws ApiException {
        BigDecimal idExpedient = null;
        SubstituirDocumentExpedient substituirDocumentExpedientRDTO = null;
        RespostaSubstituirDocumentExpedientRDTO response = api.substituirDocumentExpedient(idExpedient, substituirDocumentExpedientRDTO);

        // TODO: test validations
    }
    
    /**
     * Upload the document provided
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadDocumentExpedientTest() throws ApiException {
        BigDecimal idExpedient = null;
        UploadDocumentExpedient uploadDocumentExpedientRDTO = null;
        RespostaUploadDocumentExpedient response = api.uploadDocumentExpedient(idExpedient, uploadDocumentExpedientRDTO);

        // TODO: test validations
    }
    
}
