/*
 * API gpadocumentacio
 * API gpadocumentacio
 *
 * OpenAPI spec version: 1.11.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package es.bcn.gpa.gpaserveis.rest.client.api.gpadocumentacio;

import java.math.BigDecimal;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DadesOperacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfConfiguracioDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfConfiguracioDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.RespostaPlantillaDocVinculada;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfiguracioDocumentacioApi
 */
@Ignore
public class ConfiguracioDocumentacioApiTest {

    private final ConfiguracioDocumentacioApi api = new ConfiguracioDocumentacioApi();

    
    /**
     * Returns the requested entrada configuracio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cercaConfiguracioDocumentacioEntradaTest() {
        BigDecimal id = null;
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        String dir = null;
        Integer nextPageNumber = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        PageDataOfConfiguracioDocsEntradaRDTO response = api.cercaConfiguracioDocumentacioEntrada(id, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements, totalPages);

        // TODO: test validations
    }
    
    /**
     * Returns the requested entrada configuracio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cercaConfiguracioDocumentacioEntradaPerTramitOvtTest() {
        BigDecimal id = null;
        BigDecimal idTramitOvt = null;
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        String dir = null;
        Integer nextPageNumber = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        PageDataOfConfiguracioDocsEntradaRDTO response = api.cercaConfiguracioDocumentacioEntradaPerTramitOvt(id, idTramitOvt, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements, totalPages);

        // TODO: test validations
    }
    
    /**
     * Returns the requested tramitacio configuracio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cercaConfiguracioDocumentacioTramitacioTest() {
        BigDecimal id = null;
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        String dir = null;
        Integer nextPageNumber = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        PageDataOfConfiguracioDocsTramitacioRDTO response = api.cercaConfiguracioDocumentacioTramitacio(id, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements, totalPages);

        // TODO: test validations
    }
    
    /**
     * comprovarDocumentacioConfDocsEntPerEstat
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comprovarDocumentacioConfDocsEntPerEstatUsingGETTest() {
        BigDecimal confDocsEntrada = null;
        BigDecimal estatFuturo = null;
        Boolean response = api.comprovarDocumentacioConfDocsEntPerEstatUsingGET(confDocsEntrada, estatFuturo);

        // TODO: test validations
    }
    
    /**
     * comprovarDocumentacioConfDocsEntPerEstat
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comprovarDocumentacioConfDocsTramPerEstatUsingGETTest() {
        BigDecimal confDocsTramitacio = null;
        BigDecimal estatFuturo = null;
        Boolean response = api.comprovarDocumentacioConfDocsTramPerEstatUsingGET(confDocsTramitacio, estatFuturo);

        // TODO: test validations
    }
    
    /**
     * Returns the requested entrada configuracio associada al requeriment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfDocAssociadaRequerimentUsingGETTest() {
        BigDecimal idRequeriment = null;
        List<ConfiguracioDocsEntradaRDTO> response = api.getConfDocAssociadaRequerimentUsingGET(idRequeriment);

        // TODO: test validations
    }
    
    /**
     * Returns the requested dadas operacio associada al requeriment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDadesOperAssociadaRequerimentUsingGETTest() {
        BigDecimal idRequeriment = null;
        List<DadesOperacioRDTO> response = api.getDadesOperAssociadaRequerimentUsingGET(idRequeriment);

        // TODO: test validations
    }
    
    /**
     * Returns the requested plantilla for the documentacio Vinculada
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlantillaDocVinculadaTest() {
        BigDecimal idConfDoc = null;
        BigDecimal idDocVinculada = null;
        RespostaPlantillaDocVinculada response = api.getPlantillaDocVinculada(idConfDoc, idDocVinculada);

        // TODO: test validations
    }
    
    /**
     * Returns the requested entrada configuracio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obtenirConfiguracioDocEntAssociarRequerimentUsingGETTest() {
        BigDecimal idConfiguracioDocumentacio = null;
        String idsConfEntrAssociarReq = null;
        Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
        Integer absoluteRowNumberOfLastRowInCurrentPage = null;
        Boolean currentPageHasNextPage = null;
        Boolean currentPageHasPreviousPage = null;
        Boolean currentPageIsFirstPage = null;
        Boolean currentPageIsLastPage = null;
        Integer currentPageNumber = null;
        String dir = null;
        Integer nextPageNumber = null;
        Integer pageSize = null;
        Integer previousPageNumber = null;
        String sort = null;
        Long totalElements = null;
        Integer totalPages = null;
        PageDataOfConfiguracioDocsEntradaRDTO response = api.obtenirConfiguracioDocEntAssociarRequerimentUsingGET(idConfiguracioDocumentacio, idsConfEntrAssociarReq, absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements, totalPages);

        // TODO: test validations
    }
    
    /**
     * Returns the requested tramitacio configuracio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obtenirConfiguracioDocumentacioTramitacioUsingGETTest() {
        BigDecimal id = null;
        List<ConfiguracioDocsTramitacioRDTO> response = api.obtenirConfiguracioDocumentacioTramitacioUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * updates the doc config
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDocumentacioEntradaUsingPUTTest() {
        ConfiguracioDocsEntradaRDTO docEntrada = null;
        BigDecimal procId = null;
        api.updateDocumentacioEntradaUsingPUT(docEntrada, procId);

        // TODO: test validations
    }
    
    /**
     * updates the doc config
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDocumentacioTramitacioUsingPUTTest() {
        ConfiguracioDocsTramitacioRDTO docTramitacio = null;
        BigDecimal procId = null;
        api.updateDocumentacioTramitacioUsingPUT(docTramitacio, procId);

        // TODO: test validations
    }
    
}
