/*
 * API gpadocumentacio
 * API gpadocumentacio
 *
 * OpenAPI spec version: 1.4.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package es.bcn.gpa.gpaserveis.rest.client.api.gpadocumentacio;

import static java.math.BigDecimal.ONE;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Matchers.isNull;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.mockito.InjectMocks;

import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.ConfiguracioDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.DadesOperacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfConfiguracioDocsEntradaRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.PageDataOfConfiguracioDocsTramitacioRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpadocumentacio.RespostaPlantillaDocVinculada;
import es.bcn.gpa.gpaserveis.rest.client.invoker.gpadocumentacio.ApiException;

/**
 * API tests for ConfiguracioDocumentacioApi
 */
@SuppressWarnings("unchecked")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ConfiguracioDocumentacioApiTest extends ParentTest {

	@InjectMocks
	private ConfiguracioDocumentacioApi api = new ConfiguracioDocumentacioApi();

	/**
	 * Returns the requested entrada configuracio associada al requeriment
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getConfDocAssociadaRequerimentUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/getConfDocAssociadaRequeriment/1"), eq("GET"), any(List.class),
				any(Object.class), any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class),
				any(GenericType.class))).thenReturn(new ArrayList<ConfiguracioDocsEntradaRDTO>());

		BigDecimal idRequeriment = ONE;
		List<ConfiguracioDocsEntradaRDTO> response = api.getConfDocAssociadaRequerimentUsingGET(idRequeriment);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested entrada configuracio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void cercaConfiguracioDocumentacioEntradaTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/entrada/1"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new PageDataOfConfiguracioDocsEntradaRDTO());

		BigDecimal id = ONE;
		Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
		Integer absoluteRowNumberOfLastRowInCurrentPage = null;
		Boolean currentPageHasNextPage = null;
		Boolean currentPageHasPreviousPage = null;
		Boolean currentPageIsFirstPage = null;
		Boolean currentPageIsLastPage = null;
		Integer currentPageNumber = null;
		String dir = null;
		Integer nextPageNumber = null;
		Integer pageSize = null;
		Integer previousPageNumber = null;
		String sort = null;
		Long totalElements = null;
		Integer totalPages = null;
		PageDataOfConfiguracioDocsEntradaRDTO response = api.cercaConfiguracioDocumentacioEntrada(id,
				absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage,
				currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize,
				previousPageNumber, sort, totalElements, totalPages);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested entrada configuracio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void cercaConfiguracioDocumentacioEntradaPerTramitOvtTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/entrada/1/1"), eq("GET"), any(List.class), any(Object.class), any(Map.class),
				any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new PageDataOfConfiguracioDocsEntradaRDTO());

		BigDecimal id = ONE;
		BigDecimal idTramitOvt = ONE;
		Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
		Integer absoluteRowNumberOfLastRowInCurrentPage = null;
		Boolean currentPageHasNextPage = null;
		Boolean currentPageHasPreviousPage = null;
		Boolean currentPageIsFirstPage = null;
		Boolean currentPageIsLastPage = null;
		Integer currentPageNumber = null;
		String dir = null;
		Integer nextPageNumber = null;
		Integer pageSize = null;
		Integer previousPageNumber = null;
		String sort = null;
		Long totalElements = null;
		Integer totalPages = null;
		PageDataOfConfiguracioDocsEntradaRDTO response = api.cercaConfiguracioDocumentacioEntradaPerTramitOvt(id, idTramitOvt,
				absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage,
				currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize,
				previousPageNumber, sort, totalElements, totalPages);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested tramitacio configuracio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getConfiguracioDocumentacioTramitacioUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/tramitacio/1"), eq("GET"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new PageDataOfConfiguracioDocsTramitacioRDTO());

		BigDecimal id = ONE;
		Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
		Integer absoluteRowNumberOfLastRowInCurrentPage = null;
		Boolean currentPageHasNextPage = null;
		Boolean currentPageHasPreviousPage = null;
		Boolean currentPageIsFirstPage = null;
		Boolean currentPageIsLastPage = null;
		Integer currentPageNumber = null;
		String dir = null;
		Integer nextPageNumber = null;
		Integer pageSize = null;
		Integer previousPageNumber = null;
		String sort = null;
		Long totalElements = null;
		Integer totalPages = null;
		PageDataOfConfiguracioDocsTramitacioRDTO response = api.getConfiguracioDocumentacioTramitacioUsingGET(id,
				absoluteRowNumberOfFirstRowInCurrentPage, absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage,
				currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize,
				previousPageNumber, sort, totalElements, totalPages);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested entrada configuracio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void obtenirConfiguracioDocEntAssociarRequerimentUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/entradaAssociarRequeriment/1/1"), eq("GET"), any(List.class),
				any(Object.class), any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class),
				any(GenericType.class))).thenReturn(new PageDataOfConfiguracioDocsEntradaRDTO());

		BigDecimal idConfiguracioDocumentacio = ONE;
		String idsConfEntrAssociarReq = ONE.toString();
		Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
		Integer absoluteRowNumberOfLastRowInCurrentPage = null;
		Boolean currentPageHasNextPage = null;
		Boolean currentPageHasPreviousPage = null;
		Boolean currentPageIsFirstPage = null;
		Boolean currentPageIsLastPage = null;
		Integer currentPageNumber = null;
		String dir = null;
		Integer nextPageNumber = null;
		Integer pageSize = null;
		Integer previousPageNumber = null;
		String sort = null;
		Long totalElements = null;
		Integer totalPages = null;
		PageDataOfConfiguracioDocsEntradaRDTO response = api.obtenirConfiguracioDocEntAssociarRequerimentUsingGET(
				idConfiguracioDocumentacio, idsConfEntrAssociarReq, absoluteRowNumberOfFirstRowInCurrentPage,
				absoluteRowNumberOfLastRowInCurrentPage, currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage,
				currentPageIsLastPage, currentPageNumber, dir, nextPageNumber, pageSize, previousPageNumber, sort, totalElements,
				totalPages);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested tramitacio configuracio
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void obtenirConfiguracioDocumentacioTramitacioUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/configuracioDocsTramitacio/1"), eq("GET"), any(List.class),
				any(Object.class), any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class),
				any(GenericType.class))).thenReturn(new ArrayList<ConfiguracioDocsTramitacioRDTO>());

		BigDecimal id = ONE;
		List<ConfiguracioDocsTramitacioRDTO> response = api.obtenirConfiguracioDocumentacioTramitacioUsingGET(id);

		assertTrue(response != null);
	}

	/**
	 * updates the doc config
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void updateDocumentacioEntradaUsingPUTTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/docEntrada/1"), eq("PUT"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(Void.class);

		ConfiguracioDocsEntradaRDTO docEntrada = new ConfiguracioDocsEntradaRDTO();
		BigDecimal procId = ONE;
		api.updateDocumentacioEntradaUsingPUT(docEntrada, procId);

		assertTrue(true);
	}

	/**
	 * updates the doc config
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void updateDocumentacioTramitacioUsingPUTTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/docTramitacio/1"), eq("PUT"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), isNull(String.class), isNull(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(Void.class);

		ConfiguracioDocsTramitacioRDTO docTramitacio = new ConfiguracioDocsTramitacioRDTO();
		BigDecimal procId = ONE;
		api.updateDocumentacioTramitacioUsingPUT(docTramitacio, procId);

		assertTrue(true);
	}

	/**
	 * comprovarDocumentacioConfDocsEntPerEstat
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void comprovarDocumentacioConfDocsEntPerEstatUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/comprovarDocumentacioConfDocsEntPerEstat/1/1"), eq("GET"), any(List.class),
				any(Object.class), any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class),
				any(GenericType.class))).thenReturn(Boolean.TRUE);

		BigDecimal confDocsEntrada = ONE;
		BigDecimal estatFuturo = ONE;
		Boolean response = api.comprovarDocumentacioConfDocsEntPerEstatUsingGET(confDocsEntrada, estatFuturo);

		assertTrue(response);
	}

	/**
	 * comprovarDocumentacioConfDocsEntPerEstat
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void comprovarDocumentacioConfDocsTramPerEstatUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/comprovarDocumentacioConfDocsTramPerEstat/1/1"), eq("GET"), any(List.class),
				any(Object.class), any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class),
				any(GenericType.class))).thenReturn(Boolean.TRUE);

		BigDecimal confDocsTramitacio = ONE;
		BigDecimal estatFuturo = ONE;
		Boolean response = api.comprovarDocumentacioConfDocsTramPerEstatUsingGET(confDocsTramitacio, estatFuturo);

		assertTrue(response);
	}

	/**
	 * Returns the requested dadas operacio associada al requeriment
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getDadesOperAssociadaRequerimentUsingGETTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/getDadesOperAssociadaRequeriment/1"), eq("GET"), any(List.class),
				any(Object.class), any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class),
				any(GenericType.class))).thenReturn(new ArrayList<DadesOperacioRDTO>());

		BigDecimal idRequeriment = ONE;
		List<DadesOperacioRDTO> response = api.getDadesOperAssociadaRequerimentUsingGET(idRequeriment);

		assertTrue(response != null);
	}

	/**
	 * Gets the plantilla doc vinculada test.
	 *
	 * @return the plantilla doc vinculada test
	 * @throws ApiException
	 *             the api exception
	 */
	@Test
	public void getPlantillaDocVinculadaTest() throws ApiException {
		when(apiClient.escapeString(any(String.class))).thenReturn(ONE.toString());
		when(apiClient.invokeAPI(eq("/configuracioDocumentacio/plantillaDocVinculada/1/1"), eq("GET"), any(List.class), any(Object.class),
				any(Map.class), any(Map.class), any(String.class), any(String.class), any(String[].class), any(GenericType.class)))
						.thenReturn(new RespostaPlantillaDocVinculada());

		RespostaPlantillaDocVinculada plantillaDocVinculada = api.getPlantillaDocVinculada(ONE, ONE);

		assertTrue(plantillaDocVinculada != null);
	}
}
