/*
 * API gpaprocediments
 * API gpaprocediments
 *
 * OpenAPI spec version: 1.3.0
 * Contact: sergio.corras@iecisa.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package es.bcn.gpa.gpaserveis.rest.client.api.gpaprocediments;

import static java.math.BigDecimal.ONE;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Matchers.isNull;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.util.List;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.mockito.InjectMocks;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaprocediments.PageDataOfProcedimentsRDTO;
import es.bcn.gpa.gpaserveis.rest.client.api.model.gpaprocediments.ProcedimentsRDTO;
import es.bcn.gpa.gpaserveis.rest.client.invoker.gpaprocediments.ApiClient.CollectionFormat;

/**
 * API tests for ProcedimentsApi
 */
@SuppressWarnings("unchecked")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ProcedimentsApiTest extends ParentTest {

	@InjectMocks
	private ProcedimentsApi api = new ProcedimentsApi();

	/**
	 * Returns all procedures that meet the search criteria
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void cercaProcedimentsTest() {
		when(apiClient.parameterToMultiValueMap(isNull(CollectionFormat.class), any(String.class), any(Object.class)))
				.thenReturn(new LinkedMultiValueMap<String, String>());
		when(apiClient.parameterToMultiValueMap(any(CollectionFormat.class), any(String.class), any(Object.class)))
				.thenReturn(new LinkedMultiValueMap<String, String>());
		when(apiClient.invokeAPI(eq("/procediments/search"), eq(HttpMethod.GET), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(new PageDataOfProcedimentsRDTO());

		Integer absoluteRowNumberOfFirstRowInCurrentPage = null;
		Integer absoluteRowNumberOfLastRowInCurrentPage = null;
		List<String> activableFormatElectronic = null;
		String actuacio = null;
		String aplicacioNegoci = null;
		String codi = null;
		List<BigDecimal> competencies = null;
		Boolean currentPageHasNextPage = null;
		Boolean currentPageHasPreviousPage = null;
		Boolean currentPageIsFirstPage = null;
		Boolean currentPageIsLastPage = null;
		Integer currentPageNumber = null;
		String dir = null;
		List<BigDecimal> estats = null;
		List<BigDecimal> families = null;
		BigDecimal id = null;
		BigDecimal idUsuari = null;
		Integer intern = null;
		Integer nextPageNumber = null;
		String nom = null;
		Integer operador = null;
		String organResolutori = null;
		Integer pageSize = null;
		Integer previousPageNumber = null;
		String sort = null;
		Long totalElements = null;
		Integer totalPages = null;
		List<BigDecimal> ugos = null;
		List<BigDecimal> iniciacions = null;
		PageDataOfProcedimentsRDTO response = api.cercaProcediments(absoluteRowNumberOfFirstRowInCurrentPage,
				absoluteRowNumberOfLastRowInCurrentPage, activableFormatElectronic, actuacio, aplicacioNegoci, codi, competencies,
				currentPageHasNextPage, currentPageHasPreviousPage, currentPageIsFirstPage, currentPageIsLastPage, currentPageNumber, dir,
				estats, families, id, idUsuari, iniciacions, intern, nextPageNumber, nom, operador, organResolutori, pageSize,
				previousPageNumber, sort, totalElements, totalPages, ugos);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested procediment
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void consultarDadesProcedimentTest() {
		when(apiClient.invokeAPI(eq("/procediments/1"), eq(HttpMethod.GET), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(new ProcedimentsRDTO());

		Integer id = 1;
		ProcedimentsRDTO response = api.consultarDadesProcediment(id);

		assertTrue(response != null);
	}

	/**
	 * Returns the requested procediment
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void consultarDadesProcedimentPerCodiTest() {
		when(apiClient.invokeAPI(eq("/procediments/perCodi/1"), eq(HttpMethod.GET), any(MultiValueMap.class), any(Object.class),
				any(HttpHeaders.class), any(MultiValueMap.class), any(List.class), any(MediaType.class), any(String[].class),
				any(ParameterizedTypeReference.class))).thenReturn(new ProcedimentsRDTO());

		String codi = ONE.toString();
		ProcedimentsRDTO response = api.consultarDadesProcedimentPerCodi(codi);

		assertTrue(response != null);
	}
}
